/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/clipboard.min.js":
/*!***************************************!*\
  !*** ./resources/js/clipboard.min.js ***!
  \***************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\r\n * clipboard.js v1.5.12\r\n * https://zenorocha.github.io/clipboard.js\r\n *\r\n * Licensed MIT Â© Zeno Rocha\r\n */\n!function (t) {\n  if (\"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\") module.exports = t();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var e; }\n}(function () {\n  var t, e, n;\n  return function t(e, n, o) {\n    function i(a, c) {\n      if (!n[a]) {\n        if (!e[a]) {\n          var s = undefined;\n          if (!c && s) return require(a, !0);\n          if (r) return r(a, !0);\n          var l = new Error(\"Cannot find module '\" + a + \"'\");\n          throw l.code = \"MODULE_NOT_FOUND\", l;\n        }\n\n        var u = n[a] = {\n          exports: {}\n        };\n        e[a][0].call(u.exports, function (t) {\n          var n = e[a][1][t];\n          return i(n ? n : t);\n        }, u, u.exports, t, e, n, o);\n      }\n\n      return n[a].exports;\n    }\n\n    for (var r = undefined, a = 0; a < o.length; a++) {\n      i(o[a]);\n    }\n\n    return i;\n  }({\n    1: [function (t, e, n) {\n      var o = t(\"matches-selector\");\n\n      e.exports = function (t, e, n) {\n        for (var i = n ? t : t.parentNode; i && i !== document;) {\n          if (o(i, e)) return i;\n          i = i.parentNode;\n        }\n      };\n    }, {\n      \"matches-selector\": 5\n    }],\n    2: [function (t, e, n) {\n      function o(t, e, n, o, r) {\n        var a = i.apply(this, arguments);\n        return t.addEventListener(n, a, r), {\n          destroy: function destroy() {\n            t.removeEventListener(n, a, r);\n          }\n        };\n      }\n\n      function i(t, e, n, o) {\n        return function (n) {\n          n.delegateTarget = r(n.target, e, !0), n.delegateTarget && o.call(t, n);\n        };\n      }\n\n      var r = t(\"closest\");\n      e.exports = o;\n    }, {\n      closest: 1\n    }],\n    3: [function (t, e, n) {\n      n.node = function (t) {\n        return void 0 !== t && t instanceof HTMLElement && 1 === t.nodeType;\n      }, n.nodeList = function (t) {\n        var e = Object.prototype.toString.call(t);\n        return void 0 !== t && (\"[object NodeList]\" === e || \"[object HTMLCollection]\" === e) && \"length\" in t && (0 === t.length || n.node(t[0]));\n      }, n.string = function (t) {\n        return \"string\" == typeof t || t instanceof String;\n      }, n.fn = function (t) {\n        var e = Object.prototype.toString.call(t);\n        return \"[object Function]\" === e;\n      };\n    }, {}],\n    4: [function (t, e, n) {\n      function o(t, e, n) {\n        if (!t && !e && !n) throw new Error(\"Missing required arguments\");\n        if (!c.string(e)) throw new TypeError(\"Second argument must be a String\");\n        if (!c.fn(n)) throw new TypeError(\"Third argument must be a Function\");\n        if (c.node(t)) return i(t, e, n);\n        if (c.nodeList(t)) return r(t, e, n);\n        if (c.string(t)) return a(t, e, n);\n        throw new TypeError(\"First argument must be a String, HTMLElement, HTMLCollection, or NodeList\");\n      }\n\n      function i(t, e, n) {\n        return t.addEventListener(e, n), {\n          destroy: function destroy() {\n            t.removeEventListener(e, n);\n          }\n        };\n      }\n\n      function r(t, e, n) {\n        return Array.prototype.forEach.call(t, function (t) {\n          t.addEventListener(e, n);\n        }), {\n          destroy: function destroy() {\n            Array.prototype.forEach.call(t, function (t) {\n              t.removeEventListener(e, n);\n            });\n          }\n        };\n      }\n\n      function a(t, e, n) {\n        return s(document.body, t, e, n);\n      }\n\n      var c = t(\"./is\"),\n          s = t(\"delegate\");\n      e.exports = o;\n    }, {\n      \"./is\": 3,\n      delegate: 2\n    }],\n    5: [function (t, e, n) {\n      function o(t, e) {\n        if (r) return r.call(t, e);\n\n        for (var n = t.parentNode.querySelectorAll(e), o = 0; o < n.length; ++o) {\n          if (n[o] == t) return !0;\n        }\n\n        return !1;\n      }\n\n      var i = Element.prototype,\n          r = i.matchesSelector || i.webkitMatchesSelector || i.mozMatchesSelector || i.msMatchesSelector || i.oMatchesSelector;\n      e.exports = o;\n    }, {}],\n    6: [function (t, e, n) {\n      function o(t) {\n        var e;\n        if (\"INPUT\" === t.nodeName || \"TEXTAREA\" === t.nodeName) t.focus(), t.setSelectionRange(0, t.value.length), e = t.value;else {\n          t.hasAttribute(\"contenteditable\") && t.focus();\n          var n = window.getSelection(),\n              o = document.createRange();\n          o.selectNodeContents(t), n.removeAllRanges(), n.addRange(o), e = n.toString();\n        }\n        return e;\n      }\n\n      e.exports = o;\n    }, {}],\n    7: [function (t, e, n) {\n      function o() {}\n\n      o.prototype = {\n        on: function on(t, e, n) {\n          var o = this.e || (this.e = {});\n          return (o[t] || (o[t] = [])).push({\n            fn: e,\n            ctx: n\n          }), this;\n        },\n        once: function once(t, e, n) {\n          function o() {\n            i.off(t, o), e.apply(n, arguments);\n          }\n\n          var i = this;\n          return o._ = e, this.on(t, o, n);\n        },\n        emit: function emit(t) {\n          var e = [].slice.call(arguments, 1),\n              n = ((this.e || (this.e = {}))[t] || []).slice(),\n              o = 0,\n              i = n.length;\n\n          for (o; i > o; o++) {\n            n[o].fn.apply(n[o].ctx, e);\n          }\n\n          return this;\n        },\n        off: function off(t, e) {\n          var n = this.e || (this.e = {}),\n              o = n[t],\n              i = [];\n          if (o && e) for (var r = 0, a = o.length; a > r; r++) {\n            o[r].fn !== e && o[r].fn._ !== e && i.push(o[r]);\n          }\n          return i.length ? n[t] = i : delete n[t], this;\n        }\n      }, e.exports = o;\n    }, {}],\n    8: [function (e, n, o) {\n      !function (i, r) {\n        if (\"function\" == typeof t && t.amd) t([\"module\", \"select\"], r);else if (\"undefined\" != typeof o) r(n, e(\"select\"));else {\n          var a = {\n            exports: {}\n          };\n          r(a, i.select), i.clipboardAction = a.exports;\n        }\n      }(this, function (t, e) {\n        \"use strict\";\n\n        function n(t) {\n          return t && t.__esModule ? t : {\n            \"default\": t\n          };\n        }\n\n        function o(t, e) {\n          if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n        }\n\n        var i = n(e),\n            r = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n          return _typeof(t);\n        } : function (t) {\n          return t && \"function\" == typeof Symbol && t.constructor === Symbol ? \"symbol\" : _typeof(t);\n        },\n            a = function () {\n          function t(t, e) {\n            for (var n = 0; n < e.length; n++) {\n              var o = e[n];\n              o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(t, o.key, o);\n            }\n          }\n\n          return function (e, n, o) {\n            return n && t(e.prototype, n), o && t(e, o), e;\n          };\n        }(),\n            c = function () {\n          function t(e) {\n            o(this, t), this.resolveOptions(e), this.initSelection();\n          }\n\n          return t.prototype.resolveOptions = function t() {\n            var e = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];\n            this.action = e.action, this.emitter = e.emitter, this.target = e.target, this.text = e.text, this.trigger = e.trigger, this.selectedText = \"\";\n          }, t.prototype.initSelection = function t() {\n            this.text ? this.selectFake() : this.target && this.selectTarget();\n          }, t.prototype.selectFake = function t() {\n            var e = this,\n                n = \"rtl\" == document.documentElement.getAttribute(\"dir\");\n            this.removeFake(), this.fakeHandlerCallback = function () {\n              return e.removeFake();\n            }, this.fakeHandler = document.body.addEventListener(\"click\", this.fakeHandlerCallback) || !0, this.fakeElem = document.createElement(\"textarea\"), this.fakeElem.style.fontSize = \"12pt\", this.fakeElem.style.border = \"0\", this.fakeElem.style.padding = \"0\", this.fakeElem.style.margin = \"0\", this.fakeElem.style.position = \"absolute\", this.fakeElem.style[n ? \"right\" : \"left\"] = \"-9999px\", this.fakeElem.style.top = (window.pageYOffset || document.documentElement.scrollTop) + \"px\", this.fakeElem.setAttribute(\"readonly\", \"\"), this.fakeElem.value = this.text, document.body.appendChild(this.fakeElem), this.selectedText = (0, i[\"default\"])(this.fakeElem), this.copyText();\n          }, t.prototype.removeFake = function t() {\n            this.fakeHandler && (document.body.removeEventListener(\"click\", this.fakeHandlerCallback), this.fakeHandler = null, this.fakeHandlerCallback = null), this.fakeElem && (document.body.removeChild(this.fakeElem), this.fakeElem = null);\n          }, t.prototype.selectTarget = function t() {\n            this.selectedText = (0, i[\"default\"])(this.target), this.copyText();\n          }, t.prototype.copyText = function t() {\n            var e = void 0;\n\n            try {\n              e = document.execCommand(this.action);\n            } catch (n) {\n              e = !1;\n            }\n\n            this.handleResult(e);\n          }, t.prototype.handleResult = function t(e) {\n            e ? this.emitter.emit(\"success\", {\n              action: this.action,\n              text: this.selectedText,\n              trigger: this.trigger,\n              clearSelection: this.clearSelection.bind(this)\n            }) : this.emitter.emit(\"error\", {\n              action: this.action,\n              trigger: this.trigger,\n              clearSelection: this.clearSelection.bind(this)\n            });\n          }, t.prototype.clearSelection = function t() {\n            this.target && this.target.blur(), window.getSelection().removeAllRanges();\n          }, t.prototype.destroy = function t() {\n            this.removeFake();\n          }, a(t, [{\n            key: \"action\",\n            set: function t() {\n              var e = arguments.length <= 0 || void 0 === arguments[0] ? \"copy\" : arguments[0];\n              if (this._action = e, \"copy\" !== this._action && \"cut\" !== this._action) throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n            },\n            get: function t() {\n              return this._action;\n            }\n          }, {\n            key: \"target\",\n            set: function t(e) {\n              if (void 0 !== e) {\n                if (!e || \"object\" !== (\"undefined\" == typeof e ? \"undefined\" : r(e)) || 1 !== e.nodeType) throw new Error('Invalid \"target\" value, use a valid Element');\n                if (\"copy\" === this.action && e.hasAttribute(\"disabled\")) throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                if (\"cut\" === this.action && (e.hasAttribute(\"readonly\") || e.hasAttribute(\"disabled\"))) throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n                this._target = e;\n              }\n            },\n            get: function t() {\n              return this._target;\n            }\n          }]), t;\n        }();\n\n        t.exports = c;\n      });\n    }, {\n      select: 6\n    }],\n    9: [function (e, n, o) {\n      !function (i, r) {\n        if (\"function\" == typeof t && t.amd) t([\"module\", \"./clipboard-action\", \"tiny-emitter\", \"good-listener\"], r);else if (\"undefined\" != typeof o) r(n, e(\"./clipboard-action\"), e(\"tiny-emitter\"), e(\"good-listener\"));else {\n          var a = {\n            exports: {}\n          };\n          r(a, i.clipboardAction, i.tinyEmitter, i.goodListener), i.clipboard = a.exports;\n        }\n      }(this, function (t, e, n, o) {\n        \"use strict\";\n\n        function i(t) {\n          return t && t.__esModule ? t : {\n            \"default\": t\n          };\n        }\n\n        function r(t, e) {\n          if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n        }\n\n        function a(t, e) {\n          if (!t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          return !e || \"object\" != _typeof(e) && \"function\" != typeof e ? t : e;\n        }\n\n        function c(t, e) {\n          if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(e));\n          t.prototype = Object.create(e && e.prototype, {\n            constructor: {\n              value: t,\n              enumerable: !1,\n              writable: !0,\n              configurable: !0\n            }\n          }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);\n        }\n\n        function s(t, e) {\n          var n = \"data-clipboard-\" + t;\n          if (e.hasAttribute(n)) return e.getAttribute(n);\n        }\n\n        var l = i(e),\n            u = i(n),\n            f = i(o),\n            d = function (t) {\n          function e(n, o) {\n            r(this, e);\n            var i = a(this, t.call(this));\n            return i.resolveOptions(o), i.listenClick(n), i;\n          }\n\n          return c(e, t), e.prototype.resolveOptions = function t() {\n            var e = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];\n            this.action = \"function\" == typeof e.action ? e.action : this.defaultAction, this.target = \"function\" == typeof e.target ? e.target : this.defaultTarget, this.text = \"function\" == typeof e.text ? e.text : this.defaultText;\n          }, e.prototype.listenClick = function t(e) {\n            var n = this;\n            this.listener = (0, f[\"default\"])(e, \"click\", function (t) {\n              return n.onClick(t);\n            });\n          }, e.prototype.onClick = function t(e) {\n            var n = e.delegateTarget || e.currentTarget;\n            this.clipboardAction && (this.clipboardAction = null), this.clipboardAction = new l[\"default\"]({\n              action: this.action(n),\n              target: this.target(n),\n              text: this.text(n),\n              trigger: n,\n              emitter: this\n            });\n          }, e.prototype.defaultAction = function t(e) {\n            return s(\"action\", e);\n          }, e.prototype.defaultTarget = function t(e) {\n            var n = s(\"target\", e);\n            return n ? document.querySelector(n) : void 0;\n          }, e.prototype.defaultText = function t(e) {\n            return s(\"text\", e);\n          }, e.prototype.destroy = function t() {\n            this.listener.destroy(), this.clipboardAction && (this.clipboardAction.destroy(), this.clipboardAction = null);\n          }, e;\n        }(u[\"default\"]);\n\n        t.exports = d;\n      });\n    }, {\n      \"./clipboard-action\": 8,\n      \"good-listener\": 4,\n      \"tiny-emitter\": 7\n    }]\n  }, {}, [9])(9);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/clipboard.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/clipboard.min.js");
/******/ 	
/******/ })()
;